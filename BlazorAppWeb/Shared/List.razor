@inject HttpClient Http
@using BlazorAppWeb
@using Plk.Blazor.DragDrop

<div style="display: table-cell">
  <div class="todolist">
    <div class="row">
      <div class="col">
        <div class="input-group">
          <input class="form-control" placeholder="Title" value="@ToDoList.Title" @onchange="@(async (ChangeEventArgs e) => { var copy = CopyList(ToDoList); ToDoList.Title = e.Value.ToString(); await UpdateList(ToDoList, copy); } )" />
          <div class="input-group-append">
            <button class="close ml-1" @onclick="RemoveList">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
        </div>
      </div>
    </div>

    <hr class="mt-4 mb-0" />

    <Dropzone Items="@ToDoList.Items" TItem="ToDoItem" OnItemDrop="DropCompleted">
      <Item ToDoItem="@context" OnRemoveClick="@(_ => ToDoList.Items.Remove(@context))"></Item>
    </Dropzone>

    <div class="row">
      <div class="col">
        <button class="btn btn-outline-primary btn-block" @onclick="@(_ => AddItem(ToDoList))">Add item</button>
      </div>
    </div>
  </div>
</div>

@code {
  [Parameter]
  public ToDoList ToDoList { get; set; }

  [Parameter]
  public EventCallback OnRemoveClick { get; set; }

  private async Task DropCompleted(ToDoItem item)
  {
    HttpResponseMessage result;
    var newPosition = ToDoList.Items.IndexOf(item) + 1;
    if (item.ToDoListId == ToDoList.Id)
    {
      result = await Http.PostAsJsonAsync($"https://localhost:44389/api/lists/{ToDoList.Id}/items/{item.Id}/moveToPosition", new StringContent(newPosition.ToString()));
    }
    else
    {
      result = await Http.PostAsJsonAsync($"https://localhost:44389/api/lists/{ToDoList.Id}/items/{item.Id}/moveToList", new StringContent(newPosition.ToString()));
    }
    if (!result.IsSuccessStatusCode)
    {
      return;
    }

    var updated = await result.Content.ReadFromJsonAsync<ToDoItem>();
    item.Position = updated.Position;
    item.ToDoListId = updated.ToDoListId;
  }

  private async Task UpdateList(ToDoList original, ToDoList copy)
  {
    var result = await Http.PutAsJsonAsync<ToDoList>($"https://localhost:44389/api/lists/{original.Id}", original);
    if (result.IsSuccessStatusCode)
    {
      return;
    }

    RevertListChanges(original, copy);
  }

  private ToDoList CopyList(ToDoList master)
  {
    return new ToDoList
    {
      Title = master.Title
    };
  }

  private async Task AddItem(ToDoList ToDoList)
  {
    var result = await Http.PostAsJsonAsync($"https://localhost:44389/api/lists/{ToDoList.Id}/items", new StringContent(string.Empty));
    var item = await result.Content.ReadFromJsonAsync<ToDoItem>();
    item.Title = string.Empty;
    item.Description = string.Empty;
    ToDoList.Items.Add(item);
  }

  private void RevertListChanges(ToDoList original, ToDoList copy)
  {
    original.Title = copy.Title;
  }

  private async Task RemoveList()
  {
    var result = await Http.DeleteAsync($"https://localhost:44389/api/lists/{ToDoList.Id}");
    if (result.IsSuccessStatusCode)
    {
      await OnRemoveClick.InvokeAsync();
    }
  }
}
