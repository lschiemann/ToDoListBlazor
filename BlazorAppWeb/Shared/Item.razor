@inject HttpClient Http
@using BlazorAppWeb

<div class="py-2">
  <div class="form-row" style="place-items: center">
    <div class="col-1">
      <input type="checkbox" checked="@ToDoItem.IsCompleted" @onchange="@(async (ChangeEventArgs e) => { var copy = CopyItem(ToDoItem); ToDoItem.IsCompleted = (bool) e.Value; await UpdateItem(ToDoItem, copy); } )" />
    </div>

    <div class="col-10">
      <div class="row">
        <div class="col">
          <input class="form-control" placeholder="Title" value="@ToDoItem.Title" @onchange="@(async (ChangeEventArgs e) => { var copy = CopyItem(ToDoItem); ToDoItem.Title = e.Value.ToString(); await UpdateItem(ToDoItem, copy); } )" />
        </div>
      </div>
      <div class="row">
        <div class="col">
          <textarea rows="3" class="form-control" placeholder="Description" value="@ToDoItem.Description" @onchange="@(async (ChangeEventArgs e) => { var copy = CopyItem(ToDoItem); ToDoItem.Description= e.Value.ToString(); await UpdateItem(ToDoItem, copy); } )" />
        </div>
      </div>
    </div>

    <div class="col-1">
      <button class="close" @onclick="RemoveItem">
        <span aria-hidden="true">&times;</span>
      </button>
    </div>
  </div>
</div>

@code {
  [Parameter]
  public ToDoItem ToDoItem { get; set; }

  [Parameter]
  public EventCallback OnRemoveClick { get; set; }

  private async Task UpdateItem(ToDoItem original, ToDoItem copy)
  {
    var result = await Http.PutAsJsonAsync<ToDoItem>($"https://localhost:44389/api/lists/{original.ToDoListId}/items/{original.Id}", original);
    if (result.IsSuccessStatusCode)
    {
      return;
    }

    RevertItemChanges(original, copy);
  }

  private ToDoItem CopyItem(ToDoItem master)
  {
    return new ToDoItem
    {
      Description = master.Description,
      IsCompleted = master.IsCompleted,
      Position = master.Position,
      Title = master.Title
    };
  }

  private void RevertItemChanges(ToDoItem original, ToDoItem copy)
  {
    original.Description = copy.Description;
    original.Position = copy.Position;
    original.IsCompleted = copy.IsCompleted;
    original.Title = copy.Title;
  }

  private async Task RemoveItem()
  {
    var result = await Http.DeleteAsync($"https://localhost:44389/api/lists/{ToDoItem.ToDoListId}/items/{ToDoItem.Id}");
    if (result.IsSuccessStatusCode)
    {
      await OnRemoveClick.InvokeAsync();
    }
  }
}
